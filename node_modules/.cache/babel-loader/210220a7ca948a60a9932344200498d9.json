{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Days from './MonthView/Days';\nimport Weekdays from './MonthView/Weekdays';\nimport WeekNumbers from './MonthView/WeekNumbers';\nimport { CALENDAR_TYPES, CALENDAR_TYPE_LOCALES } from './shared/const';\nimport { isCalendarType, tileGroupProps } from './shared/propTypes';\n\nfunction getCalendarTypeFromLocale(locale) {\n  for (var _i = 0, _a = Object.entries(CALENDAR_TYPE_LOCALES); _i < _a.length; _i++) {\n    var _b = _a[_i],\n        calendarType = _b[0],\n        locales = _b[1];\n\n    if (locales.includes(locale)) {\n      return calendarType;\n    }\n  }\n\n  return CALENDAR_TYPES.ISO_8601;\n}\n\nexport default function MonthView(props) {\n  var activeStartDate = props.activeStartDate,\n      locale = props.locale,\n      onMouseLeave = props.onMouseLeave,\n      showFixedNumberOfWeeks = props.showFixedNumberOfWeeks;\n\n  var _a = props.calendarType,\n      calendarType = _a === void 0 ? getCalendarTypeFromLocale(locale) : _a,\n      formatShortWeekday = props.formatShortWeekday,\n      formatWeekday = props.formatWeekday,\n      onClickWeekNumber = props.onClickWeekNumber,\n      showWeekNumbers = props.showWeekNumbers,\n      childProps = __rest(props, [\"calendarType\", \"formatShortWeekday\", \"formatWeekday\", \"onClickWeekNumber\", \"showWeekNumbers\"]);\n\n  function renderWeekdays() {\n    return React.createElement(Weekdays, {\n      calendarType: calendarType,\n      formatShortWeekday: formatShortWeekday,\n      formatWeekday: formatWeekday,\n      locale: locale,\n      onMouseLeave: onMouseLeave\n    });\n  }\n\n  function renderWeekNumbers() {\n    if (!showWeekNumbers) {\n      return null;\n    }\n\n    return React.createElement(WeekNumbers, {\n      activeStartDate: activeStartDate,\n      calendarType: calendarType,\n      onClickWeekNumber: onClickWeekNumber,\n      onMouseLeave: onMouseLeave,\n      showFixedNumberOfWeeks: showFixedNumberOfWeeks\n    });\n  }\n\n  function renderDays() {\n    return React.createElement(Days, __assign({\n      calendarType: calendarType\n    }, childProps));\n  }\n\n  var className = 'react-calendar__month-view';\n  return React.createElement(\"div\", {\n    className: clsx(className, showWeekNumbers ? \"\".concat(className, \"--weekNumbers\") : '')\n  }, React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'flex-end'\n    }\n  }, renderWeekNumbers(), React.createElement(\"div\", {\n    style: {\n      flexGrow: 1,\n      width: '100%'\n    }\n  }, renderWeekdays(), renderDays())));\n}\nMonthView.propTypes = __assign(__assign({}, tileGroupProps), {\n  calendarType: isCalendarType,\n  formatDay: PropTypes.func,\n  formatLongDate: PropTypes.func,\n  formatShortWeekday: PropTypes.func,\n  formatWeekday: PropTypes.func,\n  onClickWeekNumber: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  showFixedNumberOfWeeks: PropTypes.bool,\n  showNeighboringMonth: PropTypes.bool,\n  showWeekNumbers: PropTypes.bool\n});","map":null,"metadata":{},"sourceType":"module"}