{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Navigation from './Calendar/Navigation';\nimport CenturyView from './CenturyView';\nimport DecadeView from './DecadeView';\nimport YearView from './YearView';\nimport MonthView from './MonthView';\nimport { getBegin, getBeginNext, getEnd, getValueRange } from './shared/dates';\nimport { isCalendarType, isClassName, isMaxDate, isMinDate, isRef, isView } from './shared/propTypes';\nimport { between } from './shared/utils';\nvar baseClassName = 'react-calendar';\nvar allViews = ['century', 'decade', 'year', 'month'];\nvar allValueTypes = ['decade', 'year', 'month', 'day'];\nvar defaultMinDate = new Date();\ndefaultMinDate.setFullYear(1, 0, 1);\ndefaultMinDate.setHours(0, 0, 0, 0);\nvar defaultMaxDate = new Date(8.64e15);\nvar defaultProps = {\n  goToRangeStartOnSelect: true,\n  maxDate: defaultMaxDate,\n  maxDetail: 'month',\n  minDate: defaultMinDate,\n  minDetail: 'century',\n  returnValue: 'start',\n  showNavigation: true,\n  showNeighboringMonth: true\n};\n\nfunction toDate(value) {\n  if (value instanceof Date) {\n    return value;\n  }\n\n  return new Date(value);\n}\n/**\n * Returns views array with disallowed values cut off.\n */\n\n\nfunction getLimitedViews(minDetail, maxDetail) {\n  return allViews.slice(allViews.indexOf(minDetail), allViews.indexOf(maxDetail) + 1);\n}\n/**\n * Determines whether a given view is allowed with currently applied settings.\n */\n\n\nfunction isViewAllowed(view, minDetail, maxDetail) {\n  var views = getLimitedViews(minDetail, maxDetail);\n  return views.indexOf(view) !== -1;\n}\n/**\n * Gets either provided view if allowed by minDetail and maxDetail, or gets\n * the default view if not allowed.\n */\n\n\nfunction getView(view, minDetail, maxDetail) {\n  if (!view) {\n    return maxDetail;\n  }\n\n  if (isViewAllowed(view, minDetail, maxDetail)) {\n    return view;\n  }\n\n  return maxDetail;\n}\n/**\n * Returns value type that can be returned with currently applied settings.\n */\n\n\nfunction getValueType(view) {\n  var index = allViews.indexOf(view);\n  return allValueTypes[index];\n}\n\nfunction getValue(value, index) {\n  var rawValue = Array.isArray(value) ? value[index] : value;\n\n  if (!rawValue) {\n    return null;\n  }\n\n  var valueDate = toDate(rawValue);\n\n  if (isNaN(valueDate.getTime())) {\n    throw new Error(\"Invalid date: \".concat(value));\n  }\n\n  return valueDate;\n}\n\nfunction getDetailValue(_a, index) {\n  var value = _a.value,\n      minDate = _a.minDate,\n      maxDate = _a.maxDate,\n      maxDetail = _a.maxDetail;\n  var valuePiece = getValue(value, index);\n\n  if (!valuePiece) {\n    return null;\n  }\n\n  var valueType = getValueType(maxDetail);\n\n  var detailValueFrom = function () {\n    switch (index) {\n      case 0:\n        return getBegin(valueType, valuePiece);\n\n      case 1:\n        return getEnd(valueType, valuePiece);\n\n      default:\n        throw new Error(\"Invalid index value: \".concat(index));\n    }\n  }();\n\n  return between(detailValueFrom, minDate, maxDate);\n}\n\nvar getDetailValueFrom = function getDetailValueFrom(args) {\n  return getDetailValue(args, 0);\n};\n\nvar getDetailValueTo = function getDetailValueTo(args) {\n  return getDetailValue(args, 1);\n};\n\nvar getDetailValueArray = function getDetailValueArray(args) {\n  return [getDetailValueFrom, getDetailValueTo].map(function (fn) {\n    return fn(args);\n  });\n};\n\nfunction getActiveStartDate(props) {\n  var maxDate = props.maxDate,\n      maxDetail = props.maxDetail,\n      minDate = props.minDate,\n      minDetail = props.minDetail,\n      value = props.value,\n      view = props.view;\n  var rangeType = getView(view, minDetail, maxDetail);\n  var valueFrom = getDetailValueFrom({\n    value: value,\n    minDate: minDate,\n    maxDate: maxDate,\n    maxDetail: maxDetail\n  }) || new Date();\n  return getBegin(rangeType, valueFrom);\n}\n\nfunction getInitialActiveStartDate(props) {\n  var activeStartDate = props.activeStartDate,\n      defaultActiveStartDate = props.defaultActiveStartDate,\n      defaultValue = props.defaultValue,\n      defaultView = props.defaultView,\n      maxDetail = props.maxDetail,\n      minDetail = props.minDetail,\n      value = props.value,\n      view = props.view,\n      otherProps = __rest(props, [\"activeStartDate\", \"defaultActiveStartDate\", \"defaultValue\", \"defaultView\", \"maxDetail\", \"minDetail\", \"value\", \"view\"]);\n\n  var rangeType = getView(view, minDetail, maxDetail);\n  var valueFrom = activeStartDate || defaultActiveStartDate;\n\n  if (valueFrom) {\n    return getBegin(rangeType, valueFrom);\n  }\n\n  return getActiveStartDate(__assign({\n    maxDetail: maxDetail,\n    minDetail: minDetail,\n    value: value || defaultValue,\n    view: view || defaultView\n  }, otherProps));\n}\n\nfunction getIsSingleValue(value) {\n  return value && (!Array.isArray(value) || value.length === 1);\n}\n\nvar isActiveStartDate = PropTypes.instanceOf(Date);\nvar isValue = PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]);\nvar isValueOrValueArray = PropTypes.oneOfType([isValue, PropTypes.arrayOf(isValue)]);\n\nvar Calendar =\n/** @class */\nfunction (_super) {\n  __extends(Calendar, _super);\n\n  function Calendar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      activeStartDate: _this.props.defaultActiveStartDate,\n      hover: null,\n      value: Array.isArray(_this.props.defaultValue) ? _this.props.defaultValue.map(function (el) {\n        return el !== null ? toDate(el) : el;\n      }) : _this.props.defaultValue !== null && _this.props.defaultValue !== undefined ? toDate(_this.props.defaultValue) : _this.props.defaultValue,\n      view: _this.props.defaultView\n    };\n\n    _this.setStateAndCallCallbacks = function (nextState, event, callback) {\n      var _a = _this,\n          previousActiveStartDate = _a.activeStartDate,\n          previousView = _a.view;\n      var _b = _this.props,\n          allowPartialRange = _b.allowPartialRange,\n          onActiveStartDateChange = _b.onActiveStartDateChange,\n          onChange = _b.onChange,\n          onViewChange = _b.onViewChange,\n          selectRange = _b.selectRange;\n      var prevArgs = {\n        action: undefined,\n        activeStartDate: previousActiveStartDate,\n        value: undefined,\n        view: previousView\n      };\n\n      _this.setState(nextState, function () {\n        var args = {\n          action: nextState.action,\n          activeStartDate: nextState.activeStartDate || _this.activeStartDate,\n          value: 'value' in nextState && nextState.value || _this.value,\n          view: 'view' in nextState && nextState.view || _this.view\n        };\n\n        function shouldUpdate(key) {\n          // Key must exist, and…\n          if (!(key in nextState)) {\n            return false;\n          }\n\n          var nextValue = nextState[key];\n          var prevValue = prevArgs[key]; // …key changed from defined to undefined or the other way around, or…\n\n          if (typeof nextValue !== typeof prevValue) {\n            return true;\n          } // …value changed.\n\n\n          if (nextValue instanceof Date && prevValue instanceof Date) {\n            return nextValue.getTime() !== prevValue.getTime();\n          } else {\n            return nextValue !== prevValue;\n          }\n        }\n\n        if (shouldUpdate('activeStartDate')) {\n          if (onActiveStartDateChange) onActiveStartDateChange(args);\n        }\n\n        if (shouldUpdate('view')) {\n          if (onViewChange) onViewChange(args);\n        }\n\n        if (shouldUpdate('value')) {\n          if (onChange) {\n            if (!event) {\n              throw new Error('event is required');\n            }\n\n            if (selectRange) {\n              var isSingleValue = getIsSingleValue(nextState.value);\n\n              if (!isSingleValue) {\n                onChange(nextState.value || null, event);\n              } else if (allowPartialRange) {\n                if (Array.isArray(nextState.value)) {\n                  throw new Error('value must not be an array');\n                }\n\n                onChange([nextState.value || null, null], event);\n              }\n            } else {\n              onChange(nextState.value || null, event);\n            }\n          }\n        }\n\n        if (callback) callback(args);\n      });\n    };\n    /**\n     * Called when the user uses navigation buttons.\n     */\n\n\n    _this.setActiveStartDate = function (nextActiveStartDate, action) {\n      _this.setStateAndCallCallbacks({\n        action: action,\n        activeStartDate: nextActiveStartDate\n      });\n    };\n\n    _this.drillDown = function (nextActiveStartDate, event) {\n      if (!_this.drillDownAvailable) {\n        return;\n      }\n\n      _this.onClickTile(nextActiveStartDate, event);\n\n      var _a = _this,\n          view = _a.view,\n          views = _a.views;\n      var onDrillDown = _this.props.onDrillDown;\n      var nextView = views[views.indexOf(view) + 1];\n\n      if (!nextView) {\n        throw new Error('Attempted to drill down from the lowest view.');\n      }\n\n      _this.setStateAndCallCallbacks({\n        action: 'drillDown',\n        activeStartDate: nextActiveStartDate,\n        view: nextView\n      }, undefined, onDrillDown);\n    };\n\n    _this.drillUp = function () {\n      if (!_this.drillUpAvailable) {\n        return;\n      }\n\n      var _a = _this,\n          activeStartDate = _a.activeStartDate,\n          view = _a.view,\n          views = _a.views;\n      var onDrillUp = _this.props.onDrillUp;\n      var nextView = views[views.indexOf(view) - 1];\n\n      if (!nextView) {\n        throw new Error('Attempted to drill up from the highest view.');\n      }\n\n      var nextActiveStartDate = getBegin(nextView, activeStartDate);\n\n      _this.setStateAndCallCallbacks({\n        action: 'drillUp',\n        activeStartDate: nextActiveStartDate,\n        view: nextView\n      }, undefined, onDrillUp);\n    };\n\n    _this.onChange = function (value, event) {\n      var previousValue = _this.value;\n      var _a = _this.props,\n          goToRangeStartOnSelect = _a.goToRangeStartOnSelect,\n          selectRange = _a.selectRange;\n\n      _this.onClickTile(value, event);\n\n      var isFirstValueInRange = selectRange && !getIsSingleValue(previousValue);\n      var nextValue;\n\n      if (selectRange) {\n        // Range selection turned on\n        var valueType = _this.valueType;\n\n        if (isFirstValueInRange) {\n          // Value has 0 or 2 elements - either way we're starting a new array\n          // First value\n          nextValue = getBegin(valueType, value);\n        } else {\n          if (!previousValue) {\n            throw new Error('previousValue is required');\n          }\n\n          if (Array.isArray(previousValue)) {\n            throw new Error('previousValue must not be an array');\n          } // Second value\n\n\n          nextValue = getValueRange(valueType, previousValue, value);\n        }\n      } else {\n        // Range selection turned off\n        nextValue = _this.getProcessedValue(value);\n      }\n\n      var nextActiveStartDate = // Range selection turned off\n      !selectRange || // Range selection turned on, first value\n      isFirstValueInRange || // Range selection turned on, second value, goToRangeStartOnSelect toggled on\n      goToRangeStartOnSelect ? getActiveStartDate(__assign(__assign({}, _this.props), {\n        value: nextValue\n      })) : null;\n      event.persist();\n\n      _this.setStateAndCallCallbacks({\n        action: 'onChange',\n        activeStartDate: nextActiveStartDate,\n        value: nextValue\n      }, event);\n    };\n\n    _this.onClickTile = function (value, event) {\n      var view = _this.view;\n      var _a = _this.props,\n          onClickDay = _a.onClickDay,\n          onClickDecade = _a.onClickDecade,\n          onClickMonth = _a.onClickMonth,\n          onClickYear = _a.onClickYear;\n\n      var callback = function () {\n        switch (view) {\n          case 'century':\n            return onClickDecade;\n\n          case 'decade':\n            return onClickYear;\n\n          case 'year':\n            return onClickMonth;\n\n          case 'month':\n            return onClickDay;\n\n          default:\n            throw new Error(\"Invalid view: \".concat(view, \".\"));\n        }\n      }();\n\n      if (callback) callback(value, event);\n    };\n\n    _this.onMouseOver = function (value) {\n      _this.setState(function (prevState) {\n        if (prevState.hover && prevState.hover.getTime() === value.getTime()) {\n          return null;\n        }\n\n        return {\n          hover: value\n        };\n      });\n    };\n\n    _this.onMouseLeave = function () {\n      _this.setState({\n        hover: null\n      });\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(Calendar.prototype, \"activeStartDate\", {\n    get: function get() {\n      var activeStartDateProps = this.props.activeStartDate;\n      var activeStartDateState = this.state.activeStartDate;\n      return activeStartDateProps || activeStartDateState || getInitialActiveStartDate(this.props);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Calendar.prototype, \"value\", {\n    get: function get() {\n      var _a = this.props,\n          selectRange = _a.selectRange,\n          valueProps = _a.value;\n      var valueState = this.state.value;\n\n      var rawValue = function () {\n        // In the middle of range selection, use value from state\n        if (selectRange && getIsSingleValue(valueState)) {\n          return valueState;\n        }\n\n        return valueProps !== undefined ? valueProps : valueState;\n      }();\n\n      if (!rawValue) {\n        return null;\n      }\n\n      return Array.isArray(rawValue) ? rawValue.map(function (el) {\n        return el !== null ? toDate(el) : el;\n      }) : rawValue !== null ? toDate(rawValue) : rawValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Calendar.prototype, \"valueType\", {\n    get: function get() {\n      var maxDetail = this.props.maxDetail;\n      return getValueType(maxDetail);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Calendar.prototype, \"view\", {\n    get: function get() {\n      var _a = this.props,\n          minDetail = _a.minDetail,\n          maxDetail = _a.maxDetail,\n          viewProps = _a.view;\n      var viewState = this.state.view;\n      return getView(viewProps || viewState, minDetail, maxDetail);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Calendar.prototype, \"views\", {\n    get: function get() {\n      var _a = this.props,\n          minDetail = _a.minDetail,\n          maxDetail = _a.maxDetail;\n      return getLimitedViews(minDetail, maxDetail);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Calendar.prototype, \"hover\", {\n    get: function get() {\n      var selectRange = this.props.selectRange;\n      var hover = this.state.hover;\n      return selectRange ? hover : null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Calendar.prototype, \"drillDownAvailable\", {\n    get: function get() {\n      var _a = this,\n          view = _a.view,\n          views = _a.views;\n\n      return views.indexOf(view) < views.length - 1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Calendar.prototype, \"drillUpAvailable\", {\n    get: function get() {\n      var _a = this,\n          view = _a.view,\n          views = _a.views;\n\n      return views.indexOf(view) > 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets current value in a desired format.\n   */\n\n  Calendar.prototype.getProcessedValue = function (value) {\n    var _a = this.props,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        maxDetail = _a.maxDetail,\n        returnValue = _a.returnValue;\n\n    var processFunction = function () {\n      switch (returnValue) {\n        case 'start':\n          return getDetailValueFrom;\n\n        case 'end':\n          return getDetailValueTo;\n\n        case 'range':\n          return getDetailValueArray;\n\n        default:\n          throw new Error('Invalid returnValue.');\n      }\n    }();\n\n    return processFunction({\n      value: value,\n      minDate: minDate,\n      maxDate: maxDate,\n      maxDetail: maxDetail\n    });\n  };\n\n  Calendar.prototype.renderContent = function (next) {\n    var _a = this,\n        currentActiveStartDate = _a.activeStartDate,\n        onMouseOver = _a.onMouseOver,\n        valueType = _a.valueType,\n        value = _a.value,\n        view = _a.view;\n\n    var _b = this.props,\n        calendarType = _b.calendarType,\n        locale = _b.locale,\n        maxDate = _b.maxDate,\n        minDate = _b.minDate,\n        selectRange = _b.selectRange,\n        tileClassName = _b.tileClassName,\n        tileContent = _b.tileContent,\n        tileDisabled = _b.tileDisabled;\n    var hover = this.hover;\n    var activeStartDate = next ? getBeginNext(view, currentActiveStartDate) : getBegin(view, currentActiveStartDate);\n    var onClick = this.drillDownAvailable ? this.drillDown : this.onChange;\n    var commonProps = {\n      activeStartDate: activeStartDate,\n      hover: hover,\n      locale: locale,\n      maxDate: maxDate,\n      minDate: minDate,\n      onClick: onClick,\n      onMouseOver: selectRange ? onMouseOver : null,\n      tileClassName: tileClassName,\n      tileContent: tileContent,\n      tileDisabled: tileDisabled,\n      value: value,\n      valueType: valueType\n    };\n\n    switch (view) {\n      case 'century':\n        {\n          var formatYear = this.props.formatYear;\n          return React.createElement(CenturyView, __assign({\n            formatYear: formatYear\n          }, commonProps));\n        }\n\n      case 'decade':\n        {\n          var formatYear = this.props.formatYear;\n          return React.createElement(DecadeView, __assign({\n            formatYear: formatYear\n          }, commonProps));\n        }\n\n      case 'year':\n        {\n          var _c = this.props,\n              formatMonth = _c.formatMonth,\n              formatMonthYear = _c.formatMonthYear;\n          return React.createElement(YearView, __assign({\n            formatMonth: formatMonth,\n            formatMonthYear: formatMonthYear\n          }, commonProps));\n        }\n\n      case 'month':\n        {\n          var _d = this.props,\n              formatDay = _d.formatDay,\n              formatLongDate = _d.formatLongDate,\n              formatShortWeekday = _d.formatShortWeekday,\n              formatWeekday = _d.formatWeekday,\n              onClickWeekNumber = _d.onClickWeekNumber,\n              showDoubleView = _d.showDoubleView,\n              showFixedNumberOfWeeks = _d.showFixedNumberOfWeeks,\n              showNeighboringMonth = _d.showNeighboringMonth,\n              showWeekNumbers = _d.showWeekNumbers;\n          var onMouseLeave = this.onMouseLeave;\n          return React.createElement(MonthView, __assign({\n            calendarType: calendarType,\n            formatDay: formatDay,\n            formatLongDate: formatLongDate,\n            formatShortWeekday: formatShortWeekday,\n            formatWeekday: formatWeekday,\n            onClickWeekNumber: onClickWeekNumber,\n            onMouseLeave: selectRange ? onMouseLeave : null,\n            showFixedNumberOfWeeks: typeof showFixedNumberOfWeeks !== 'undefined' ? showFixedNumberOfWeeks : showDoubleView,\n            showNeighboringMonth: showNeighboringMonth,\n            showWeekNumbers: showWeekNumbers\n          }, commonProps));\n        }\n\n      default:\n        throw new Error(\"Invalid view: \".concat(view, \".\"));\n    }\n  };\n\n  Calendar.prototype.renderNavigation = function () {\n    var showNavigation = this.props.showNavigation;\n\n    if (!showNavigation) {\n      return null;\n    }\n\n    var _a = this,\n        activeStartDate = _a.activeStartDate,\n        view = _a.view,\n        views = _a.views;\n\n    var _b = this.props,\n        formatMonthYear = _b.formatMonthYear,\n        formatYear = _b.formatYear,\n        locale = _b.locale,\n        maxDate = _b.maxDate,\n        minDate = _b.minDate,\n        navigationAriaLabel = _b.navigationAriaLabel,\n        navigationAriaLive = _b.navigationAriaLive,\n        navigationLabel = _b.navigationLabel,\n        next2AriaLabel = _b.next2AriaLabel,\n        next2Label = _b.next2Label,\n        nextAriaLabel = _b.nextAriaLabel,\n        nextLabel = _b.nextLabel,\n        prev2AriaLabel = _b.prev2AriaLabel,\n        prev2Label = _b.prev2Label,\n        prevAriaLabel = _b.prevAriaLabel,\n        prevLabel = _b.prevLabel,\n        showDoubleView = _b.showDoubleView;\n    return React.createElement(Navigation, {\n      activeStartDate: activeStartDate,\n      drillUp: this.drillUp,\n      formatMonthYear: formatMonthYear,\n      formatYear: formatYear,\n      locale: locale,\n      maxDate: maxDate,\n      minDate: minDate,\n      navigationAriaLabel: navigationAriaLabel,\n      navigationAriaLive: navigationAriaLive,\n      navigationLabel: navigationLabel,\n      next2AriaLabel: next2AriaLabel,\n      next2Label: next2Label,\n      nextAriaLabel: nextAriaLabel,\n      nextLabel: nextLabel,\n      prev2AriaLabel: prev2AriaLabel,\n      prev2Label: prev2Label,\n      prevAriaLabel: prevAriaLabel,\n      prevLabel: prevLabel,\n      setActiveStartDate: this.setActiveStartDate,\n      showDoubleView: showDoubleView,\n      view: view,\n      views: views\n    });\n  };\n\n  Calendar.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        inputRef = _a.inputRef,\n        selectRange = _a.selectRange,\n        showDoubleView = _a.showDoubleView;\n\n    var _b = this,\n        onMouseLeave = _b.onMouseLeave,\n        value = _b.value;\n\n    var valueArray = Array.isArray(value) ? value : [value];\n    return React.createElement(\"div\", {\n      className: clsx(baseClassName, selectRange && valueArray.length === 1 && \"\".concat(baseClassName, \"--selectRange\"), showDoubleView && \"\".concat(baseClassName, \"--doubleView\"), className),\n      ref: inputRef\n    }, this.renderNavigation(), React.createElement(\"div\", {\n      className: \"\".concat(baseClassName, \"__viewContainer\"),\n      onBlur: selectRange ? onMouseLeave : undefined,\n      onMouseLeave: selectRange ? onMouseLeave : undefined\n    }, this.renderContent(), showDoubleView ? this.renderContent(true) : null));\n  };\n\n  Calendar.defaultProps = defaultProps;\n  Calendar.propTypes = {\n    activeStartDate: isActiveStartDate,\n    allowPartialRange: PropTypes.bool,\n    calendarType: isCalendarType,\n    className: isClassName,\n    defaultActiveStartDate: isActiveStartDate,\n    defaultValue: isValueOrValueArray,\n    defaultView: isView,\n    formatDay: PropTypes.func,\n    formatLongDate: PropTypes.func,\n    formatMonth: PropTypes.func,\n    formatMonthYear: PropTypes.func,\n    formatShortWeekday: PropTypes.func,\n    formatWeekday: PropTypes.func,\n    formatYear: PropTypes.func,\n    goToRangeStartOnSelect: PropTypes.bool,\n    inputRef: isRef,\n    locale: PropTypes.string,\n    maxDate: isMaxDate,\n    maxDetail: PropTypes.oneOf(allViews),\n    minDate: isMinDate,\n    minDetail: PropTypes.oneOf(allViews),\n    navigationAriaLabel: PropTypes.string,\n    navigationAriaLive: PropTypes.oneOf(['off', 'polite', 'assertive']),\n    navigationLabel: PropTypes.func,\n    next2AriaLabel: PropTypes.string,\n    next2Label: PropTypes.node,\n    nextAriaLabel: PropTypes.string,\n    nextLabel: PropTypes.node,\n    onActiveStartDateChange: PropTypes.func,\n    onChange: PropTypes.func,\n    onClickDay: PropTypes.func,\n    onClickDecade: PropTypes.func,\n    onClickMonth: PropTypes.func,\n    onClickWeekNumber: PropTypes.func,\n    onClickYear: PropTypes.func,\n    onDrillDown: PropTypes.func,\n    onDrillUp: PropTypes.func,\n    onViewChange: PropTypes.func,\n    prev2AriaLabel: PropTypes.string,\n    prev2Label: PropTypes.node,\n    prevAriaLabel: PropTypes.string,\n    prevLabel: PropTypes.node,\n    returnValue: PropTypes.oneOf(['start', 'end', 'range']),\n    selectRange: PropTypes.bool,\n    showDoubleView: PropTypes.bool,\n    showFixedNumberOfWeeks: PropTypes.bool,\n    showNavigation: PropTypes.bool,\n    showNeighboringMonth: PropTypes.bool,\n    showWeekNumbers: PropTypes.bool,\n    tileClassName: PropTypes.oneOfType([PropTypes.func, isClassName]),\n    tileContent: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n    tileDisabled: PropTypes.func,\n    value: isValueOrValueArray,\n    view: isView\n  };\n  return Calendar;\n}(Component);\n\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}