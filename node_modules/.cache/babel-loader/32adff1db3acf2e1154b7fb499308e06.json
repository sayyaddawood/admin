{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getYear, getMonth, getDaysInMonth } from '@wojtekmaj/date-utils';\nimport TileGroup from '../TileGroup';\nimport Day from './Day';\nimport { getDayOfWeek } from '../shared/dates';\nimport { isCalendarType, tileGroupProps } from '../shared/propTypes';\nexport default function Days(props) {\n  var activeStartDate = props.activeStartDate,\n      calendarType = props.calendarType;\n\n  var showFixedNumberOfWeeks = props.showFixedNumberOfWeeks,\n      showNeighboringMonth = props.showNeighboringMonth,\n      otherProps = __rest(props, [\"showFixedNumberOfWeeks\", \"showNeighboringMonth\"]);\n\n  var year = getYear(activeStartDate);\n  var monthIndex = getMonth(activeStartDate);\n  var hasFixedNumberOfWeeks = showFixedNumberOfWeeks || showNeighboringMonth;\n  var dayOfWeek = getDayOfWeek(activeStartDate, calendarType);\n  var offset = hasFixedNumberOfWeeks ? 0 : dayOfWeek;\n  /**\n   * Defines on which day of the month the grid shall start. If we simply show current\n   * month, we obviously start on day one, but if showNeighboringMonth is set to\n   * true, we need to find the beginning of the week the first day of the month is in.\n   */\n\n  var start = (hasFixedNumberOfWeeks ? -dayOfWeek : 0) + 1;\n  /**\n   * Defines on which day of the month the grid shall end. If we simply show current\n   * month, we need to stop on the last day of the month, but if showNeighboringMonth\n   * is set to true, we need to find the end of the week the last day of the month is in.\n   */\n\n  var end = function () {\n    if (showFixedNumberOfWeeks) {\n      // Always show 6 weeks\n      return start + 6 * 7 - 1;\n    }\n\n    var daysInMonth = getDaysInMonth(activeStartDate);\n\n    if (showNeighboringMonth) {\n      var activeEndDate = new Date();\n      activeEndDate.setFullYear(year, monthIndex, daysInMonth);\n      activeEndDate.setHours(0, 0, 0, 0);\n      var daysUntilEndOfTheWeek = 7 - getDayOfWeek(activeEndDate, calendarType) - 1;\n      return daysInMonth + daysUntilEndOfTheWeek;\n    }\n\n    return daysInMonth;\n  }();\n\n  return React.createElement(TileGroup, __assign({}, otherProps, {\n    className: \"react-calendar__month-view__days\",\n    count: 7,\n    currentMonthIndex: monthIndex,\n    dateTransform: function dateTransform(day) {\n      var date = new Date();\n      date.setFullYear(year, monthIndex, day);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    },\n    dateType: \"day\",\n    end: end,\n    offset: offset,\n    start: start,\n    tile: Day\n  }));\n}\nDays.propTypes = __assign({\n  calendarType: isCalendarType,\n  showFixedNumberOfWeeks: PropTypes.bool,\n  showNeighboringMonth: PropTypes.bool\n}, tileGroupProps);","map":null,"metadata":{},"sourceType":"module"}