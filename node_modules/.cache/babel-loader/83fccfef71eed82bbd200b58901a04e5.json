{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { tileProps } from './shared/propTypes';\n\nfunction datesAreDifferent(date1, date2) {\n  return date1 && !date2 || !date1 && date2 || date1 && date2 && date1.getTime() !== date2.getTime();\n}\n\nvar Tile =\n/** @class */\nfunction (_super) {\n  __extends(Tile, _super);\n\n  function Tile() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {};\n    return _this;\n  }\n\n  Tile.getDerivedStateFromProps = function (nextProps, prevState) {\n    var activeStartDate = nextProps.activeStartDate,\n        date = nextProps.date,\n        tileClassName = nextProps.tileClassName,\n        tileContent = nextProps.tileContent,\n        view = nextProps.view;\n    var nextState = {};\n    var args = {\n      activeStartDate: activeStartDate,\n      date: date,\n      view: view\n    };\n\n    if (tileClassName !== prevState.tileClassNameProps || datesAreDifferent(activeStartDate, prevState.activeStartDateProps)) {\n      nextState.tileClassName = typeof tileClassName === 'function' ? tileClassName(args) : tileClassName;\n      nextState.tileClassNameProps = tileClassName;\n    }\n\n    if (tileContent !== prevState.tileContentProps || datesAreDifferent(activeStartDate, prevState.activeStartDateProps)) {\n      nextState.tileContent = typeof tileContent === 'function' ? tileContent(args) : tileContent;\n      nextState.tileContentProps = tileContent;\n    }\n\n    nextState.activeStartDateProps = activeStartDate;\n    return nextState;\n  };\n\n  Tile.prototype.render = function () {\n    var _a = this.props,\n        activeStartDate = _a.activeStartDate,\n        children = _a.children,\n        classes = _a.classes,\n        date = _a.date,\n        formatAbbr = _a.formatAbbr,\n        locale = _a.locale,\n        maxDate = _a.maxDate,\n        maxDateTransform = _a.maxDateTransform,\n        minDate = _a.minDate,\n        minDateTransform = _a.minDateTransform,\n        onClick = _a.onClick,\n        onMouseOver = _a.onMouseOver,\n        style = _a.style,\n        tileDisabled = _a.tileDisabled,\n        view = _a.view;\n    var _b = this.state,\n        tileClassName = _b.tileClassName,\n        tileContent = _b.tileContent;\n    return React.createElement(\"button\", {\n      className: clsx(classes, tileClassName),\n      disabled: minDate && minDateTransform(minDate) > date || maxDate && maxDateTransform(maxDate) < date || tileDisabled && tileDisabled({\n        activeStartDate: activeStartDate,\n        date: date,\n        view: view\n      }),\n      onClick: onClick ? function (event) {\n        return onClick(date, event);\n      } : undefined,\n      onFocus: onMouseOver ? function () {\n        return onMouseOver(date);\n      } : undefined,\n      onMouseOver: onMouseOver ? function () {\n        return onMouseOver(date);\n      } : undefined,\n      style: style,\n      type: \"button\"\n    }, formatAbbr ? React.createElement(\"abbr\", {\n      \"aria-label\": formatAbbr(locale, date)\n    }, children) : children, tileContent);\n  };\n\n  Tile.propTypes = __assign(__assign({}, tileProps), {\n    children: PropTypes.node.isRequired,\n    formatAbbr: PropTypes.func,\n    maxDateTransform: PropTypes.func.isRequired,\n    minDateTransform: PropTypes.func.isRequired\n  });\n  return Tile;\n}(Component);\n\nexport default Tile;","map":null,"metadata":{},"sourceType":"module"}